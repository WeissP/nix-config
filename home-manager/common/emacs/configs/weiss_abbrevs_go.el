(with-eval-after-load 'go-mode
  (when (boundp 'go-mode-abbrev-table)
    (clear-abbrev-table go-mode-abbrev-table))

  (define-abbrev-table 'go-mode-abbrev-table
    '(
      ("c" "const" weiss--ahf)
      ("const" "const (\n▮\n)" weiss--ahf-indent)
      ("mk" "make(▮)" weiss--ahf)
      ("ca" "case ▮:" weiss--ahf)
      ("de" "default:\n▮" weiss--ahf-indent)
      ("dm" "data := map[string]interface{}" weiss--ahf-indent)
      ("e" ":= ▮" weiss--ahf)
      ("erf" "fmt.Errorf(\"▮:%w\",) " weiss--ahf)
      ("en" "errors.New(\"▮\")" weiss--ahf)
      ("f" "func ▮(){\n\n}" weiss--ahf-indent)
      ("fr" "for i, x := range ▮ {\n\n}" weiss--ahf-indent)
      ("fkv" "for k, v := range ▮ {\n\n}" weiss--ahf-indent)
      ("fry" "for j, y := range ▮ {\n\n}" weiss--ahf-indent)
      ("fs" "rows, _ := conn.Query(context.Background(), q)\nfor rows.Next() {\nvar ▮\nerr := rows.Scan(&)\nif err != nil {\npanic(err)\n}\n}" weiss--ahf-indent)
      ("fi" "for i := 0; i < ▮; i++ {\n\n}" weiss--ahf-indent)
      ("fj" "for j := 0; j < ▮; j++ {\n\n}" weiss--ahf-indent)
      ("fm" "for k, v := range ▮{\n\n}" weiss--ahf-indent)
      ("ie" "if err != nil {\n▮\n}" weiss--ahf-indent)
      ("im" "import (\n\"▮\"\n)" weiss--ahf-indent)
      ("imp" "panic(\"not implemented\") // TODO: Implement" weiss--ahf-indent)
      ("la" "<-" weiss--ahf)
      ("pa" "package ▮" weiss--ahf)
      ("pr" "fmt.Printf(\":%v\\n\", ▮)")
      ("prn" "fmt.Println(\"▮\")")
      ("rt" "return ▮" weiss--ahf)
      ("rc" "regexp.MustCompile(`▮`)" weiss--ahf)
      ("st" "%T" weiss--ahf)
      ("if" "if ▮ {\n\n}" weiss--ahf-indent)
      ("sv" "%v" weiss--ahf)
      ("sf" "fmt.Sprintf(\"%v\",▮)" weiss--ahf)
      ("sbf" "fmt.Fprintf(&sb, \"%v\",▮)" weiss--ahf)
      ("sbw" "sb.WriteString(▮)" weiss--ahf)
      ("sbs" "sb.String()" weiss--ahf)
      ("vsb" "var sb strings.Builder" weiss--ahf)
      ("ti" "type ▮ interface {\n\n}" weiss--ahf-indent)
      ("ts" "type ▮ struct {\n\n}" weiss--ahf-indent)
      ("tf" "type ▮ func()" weiss--ahf-indent)
      ("s" "switch" weiss--ahf)
      ("switch" "switch ▮ {\ncase :\n\ndefault:\n}" weiss--ahf-indent)
      ("bchmk" "func Benchmark▮(b *testing.B){\nfor i := 0; i < b.N; i++ {\n\n}\n}" weiss--ahf-indent)
      ))
  )


(provide 'weiss_abbrevs_go)
